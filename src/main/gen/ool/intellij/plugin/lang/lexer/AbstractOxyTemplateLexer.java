/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ool.intellij.plugin.lang.lexer;

import static ool.intellij.plugin.psi.OxyTemplateTypes.*;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>OxyTemplateLexer.flex</tt>
 */
public abstract class AbstractOxyTemplateLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_BLOCK = 2;
  public static final int S_DIRECTIVE_BLOCK = 4;
  public static final int S_JAVASCRIPT_BLOCK = 6;
  public static final int S_JAVASCRIPT = 8;
  public static final int S_DIRECTIVE_PARAM = 10;
  public static final int S_MACRO_TAG_START = 12;
  public static final int S_MACRO_OPEN_OR_EMPTY_TAG = 14;
  public static final int S_MACRO_CLOSE_TAG = 16;
  public static final int S_MACRO_PARAM_ASIGNMENT = 18;
  public static final int S_MACRO_NAME = 20;
  public static final int S_MACRO_PARAM_DQD = 22;
  public static final int S_MACRO_PARAM_SQD = 24;
  public static final int S_MACRO_PARAM_EXPRESSION_DQD = 26;
  public static final int S_MACRO_PARAM_EXPRESSION_SQD = 28;
  public static final int S_COMMENT_BLOCK = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\32\1\30\1\34\1\35\1\27\22\0\1\32\1\0\1\31\1\23\1\0\1\2\1\22\1\36\5"+
    "\0\1\33\1\11\1\6\12\25\1\21\1\26\1\1\1\3\1\4\1\0\1\5\32\7\1\12\1\33\1\13\1"+
    "\0\1\10\1\0\4\24\1\15\7\24\1\14\2\24\1\17\1\24\1\20\5\24\1\16\2\24\1\0\1\33"+
    "\10\0\1\34\242\0\2\34\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\0\1\3\1\4\1\0\1\5"+
    "\3\0\2\6\2\7\1\10\1\1\3\11\1\12\1\2"+
    "\2\13\1\14\2\15\1\16\1\3\1\4\2\13\1\17"+
    "\1\4\1\20\1\5\1\21\1\22\1\21\1\23\1\24"+
    "\1\25\1\26\1\23\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\33\3\6\1\35\3\6\1\7\1\36\1\7"+
    "\1\10\1\37\2\1\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\2\0\14\6\1\10\1\46\1\1\1\47\1\50"+
    "\1\51\1\0\5\6\1\52\7\6\1\53\1\54\1\34"+
    "\12\6\1\55\3\6\1\56\3\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2\0\u01d1"+
    "\0\u01f0\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b\0\u020f\0\u02aa"+
    "\0\u020f\0\u020f\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u026c"+
    "\0\u020f\0\u0345\0\u0364\0\u0383\0\u020f\0\u020f\0\u03a2\0\u0383"+
    "\0\u020f\0\u020f\0\u020f\0\u020f\0\u020f\0\u020f\0\u020f\0\u020f"+
    "\0\u020f\0\u03c1\0\u026c\0\u03e0\0\u03ff\0\u041e\0\u020f\0\u043d"+
    "\0\u045c\0\u047b\0\u049a\0\u020f\0\u04b9\0\u04d8\0\u020f\0\u04f7"+
    "\0\u0516\0\u0535\0\u020f\0\u020f\0\u020f\0\u020f\0\u020f\0\u0554"+
    "\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c"+
    "\0\u066b\0\u068a\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u020f\0\u0725"+
    "\0\u020f\0\u020f\0\u020f\0\u0744\0\u0763\0\u0782\0\u07a1\0\u07c0"+
    "\0\u07df\0\u020f\0\u07fe\0\u081d\0\u083c\0\u085b\0\u087a\0\u0899"+
    "\0\u08b8\0\u020f\0\u020f\0\u08d7\0\u08f6\0\u0915\0\u0934\0\u0953"+
    "\0\u0972\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d\0\u020f\0\u0a2c"+
    "\0\u0a4b\0\u0a6a\0\u020f\0\u0a89\0\u0aa8\0\u0ac7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\1\1\21\35\1\1\22\1\23\1\24\24\22\2\25"+
    "\1\22\1\25\1\22\1\0\1\25\1\22\1\26\1\27"+
    "\1\30\4\27\2\26\1\27\7\26\1\27\5\26\2\25"+
    "\1\31\1\25\1\27\1\26\1\25\1\26\2\32\1\33"+
    "\24\32\2\34\1\32\1\34\1\32\1\0\1\34\1\32"+
    "\2\5\1\35\34\5\27\36\1\37\1\40\1\41\1\42"+
    "\2\36\1\42\1\36\1\22\1\43\25\22\2\25\1\22"+
    "\1\25\1\22\1\0\1\25\1\22\1\44\3\45\1\46"+
    "\1\45\1\47\2\44\1\45\2\44\1\50\4\44\1\51"+
    "\5\44\2\25\1\45\1\25\1\45\1\44\1\25\1\44"+
    "\4\52\1\53\7\52\1\54\4\52\1\51\5\52\2\25"+
    "\1\52\1\25\1\52\1\0\1\25\1\52\3\55\1\56"+
    "\23\55\2\25\1\57\1\25\1\55\1\0\1\25\1\60"+
    "\7\61\1\62\4\61\5\62\3\61\1\62\2\61\2\25"+
    "\1\61\1\63\1\61\1\0\1\25\1\61\15\64\1\65"+
    "\4\64\1\66\6\64\1\67\5\64\15\70\1\71\4\70"+
    "\1\72\13\70\1\67\31\73\1\74\5\73\36\75\1\74"+
    "\6\20\1\76\30\20\1\1\1\21\1\77\3\1\1\100"+
    "\5\1\1\101\22\1\41\0\1\102\40\0\1\103\61\0"+
    "\2\25\1\0\1\25\2\0\1\25\1\0\1\26\6\0"+
    "\2\26\1\0\7\26\1\0\5\26\5\0\1\26\1\0"+
    "\1\26\4\0\1\104\61\0\2\34\1\0\1\34\2\0"+
    "\1\34\1\0\2\5\1\35\1\5\1\105\32\5\27\36"+
    "\3\0\5\36\27\0\1\25\1\40\1\0\1\25\2\0"+
    "\1\25\1\0\27\36\2\25\1\0\1\42\2\36\1\42"+
    "\1\36\6\0\1\106\30\0\1\44\6\0\2\44\1\0"+
    "\7\44\1\0\5\44\5\0\1\44\1\0\1\44\4\0"+
    "\1\107\41\0\2\62\1\110\1\111\1\0\5\62\3\0"+
    "\2\62\11\0\15\64\1\112\4\64\1\113\6\64\1\0"+
    "\22\64\1\112\1\114\3\64\1\113\6\64\1\0\21\64"+
    "\1\115\1\116\3\115\1\64\1\113\1\117\2\115\3\64"+
    "\1\0\5\64\15\70\1\120\4\70\1\121\13\70\1\0"+
    "\15\70\1\120\1\122\3\70\1\121\13\70\1\0\14\70"+
    "\1\123\1\124\3\123\1\70\1\121\1\125\2\123\10\70"+
    "\1\0\31\73\1\0\5\73\36\75\1\0\6\20\1\126"+
    "\30\20\1\1\1\21\4\1\1\127\5\1\1\130\23\1"+
    "\1\21\17\1\1\131\15\1\3\0\1\132\1\0\1\133"+
    "\40\0\1\62\4\0\5\62\3\0\1\62\21\0\1\134"+
    "\4\0\5\134\3\0\1\134\12\0\15\64\1\112\1\135"+
    "\3\64\1\113\6\64\1\0\21\64\1\136\1\137\3\136"+
    "\1\64\1\113\1\140\2\136\3\64\1\0\22\64\1\112"+
    "\1\64\1\141\2\64\1\113\6\64\1\0\21\64\1\115"+
    "\1\116\3\115\1\64\1\113\1\64\2\115\1\142\2\64"+
    "\1\0\21\64\1\115\1\116\1\143\2\115\1\64\1\113"+
    "\1\64\2\115\1\142\2\64\1\0\21\64\1\115\1\116"+
    "\3\115\1\64\1\113\1\64\2\115\3\64\1\0\5\64"+
    "\15\70\1\120\1\144\3\70\1\121\13\70\1\0\14\70"+
    "\1\145\1\146\3\145\1\70\1\121\1\147\2\145\10\70"+
    "\1\0\15\70\1\120\1\70\1\150\2\70\1\121\13\70"+
    "\1\0\14\70\1\123\1\124\3\123\1\70\1\121\1\70"+
    "\2\123\1\142\7\70\1\0\14\70\1\123\1\124\1\151"+
    "\2\123\1\70\1\121\1\70\2\123\1\142\7\70\1\0"+
    "\14\70\1\123\1\124\3\123\1\70\1\121\1\70\2\123"+
    "\10\70\1\0\4\20\1\152\1\20\1\126\30\20\1\1"+
    "\1\21\17\1\1\153\15\1\7\0\2\134\1\111\1\0"+
    "\1\154\5\134\3\0\2\134\11\0\15\64\1\112\1\64"+
    "\1\155\2\64\1\113\6\64\1\0\21\64\1\136\1\137"+
    "\3\136\1\64\1\113\1\64\2\136\1\0\2\64\1\0"+
    "\21\64\1\136\1\137\1\156\2\136\1\64\1\113\1\64"+
    "\2\136\1\0\2\64\1\0\21\64\1\136\1\137\3\136"+
    "\1\64\1\113\1\64\2\136\3\64\1\0\22\64\1\112"+
    "\2\64\1\157\1\64\1\113\6\64\1\0\21\64\1\115"+
    "\1\116\1\115\1\160\1\115\1\64\1\113\1\64\2\115"+
    "\1\142\2\64\1\0\5\64\15\70\1\120\1\70\1\161"+
    "\2\70\1\121\13\70\1\0\14\70\1\145\1\146\3\145"+
    "\1\70\1\121\1\70\2\145\1\0\7\70\1\0\14\70"+
    "\1\145\1\146\1\162\2\145\1\70\1\121\1\70\2\145"+
    "\1\0\7\70\1\0\14\70\1\145\1\146\3\145\1\70"+
    "\1\121\1\70\2\145\10\70\1\0\15\70\1\120\2\70"+
    "\1\163\1\70\1\121\13\70\1\0\14\70\1\123\1\124"+
    "\1\123\1\164\1\123\1\70\1\121\1\70\2\123\1\142"+
    "\7\70\13\0\1\111\24\0\15\64\1\112\2\64\1\165"+
    "\1\64\1\113\6\64\1\0\21\64\1\136\1\137\1\136"+
    "\1\166\1\136\1\64\1\113\1\64\2\136\1\0\2\64"+
    "\1\0\22\64\1\112\3\64\1\167\1\113\6\64\1\0"+
    "\21\64\1\115\1\116\2\115\1\170\1\64\1\113\1\64"+
    "\2\115\1\142\2\64\1\0\5\64\15\70\1\120\2\70"+
    "\1\171\1\70\1\121\13\70\1\0\14\70\1\145\1\146"+
    "\1\145\1\172\1\145\1\70\1\121\1\70\2\145\1\0"+
    "\7\70\1\0\15\70\1\120\3\70\1\173\1\121\13\70"+
    "\1\0\14\70\1\123\1\124\2\123\1\174\1\70\1\121"+
    "\1\70\2\123\1\142\7\70\1\0\15\64\1\112\3\64"+
    "\1\0\1\113\6\64\1\0\21\64\1\136\1\137\2\136"+
    "\1\175\1\64\1\113\1\64\2\136\1\0\2\64\1\0"+
    "\21\64\1\115\1\116\3\115\1\0\1\113\1\64\2\115"+
    "\1\142\2\64\1\0\5\64\15\70\1\120\3\70\1\0"+
    "\1\121\13\70\1\0\14\70\1\145\1\146\2\145\1\176"+
    "\1\70\1\121\1\70\2\145\1\0\7\70\1\0\14\70"+
    "\1\123\1\124\3\123\1\0\1\121\1\70\2\123\1\142"+
    "\7\70\1\0\14\64\1\136\1\137\3\136\1\0\1\113"+
    "\1\64\2\136\1\0\2\64\1\0\5\64\14\70\1\145"+
    "\1\146\3\145\1\0\1\121\1\70\2\145\1\0\7\70"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2790];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\3\0"+
    "\6\1\1\11\4\1\1\11\1\1\2\11\6\1\1\11"+
    "\3\1\2\11\2\1\11\11\5\1\1\11\4\1\1\11"+
    "\2\1\1\11\3\1\5\11\2\0\15\1\1\11\1\1"+
    "\3\11\1\0\5\1\1\11\7\1\2\11\13\1\1\11"+
    "\3\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    protected CharSequence lastSeenMacroName;

    protected CharSequence lastSeenAttributeName;

    private Stack<Integer> stack = new Stack();

    abstract protected IElementType decideParameterType();

    abstract protected CharSequence getTokenText();

    private void yypushstate(int newState)
    {
        stack.push(yystate());
        yybegin(newState);
    }

    private void yypopstate()
    {
        yybegin(stack.pop());
    }

    private void yypopstate(int count)
    {
        int newState = YYINITIAL;

        while(count-- != 0 && ! stack.isEmpty())
        {
            newState = stack.pop();
        }

        yybegin(newState);
    }

    private void yyresetstate()
    {
        while( ! stack.isEmpty())
        {
            yybegin(stack.pop());
        }
    }

    private IElementType trimElement(IElementType element)
    {
        return trimElement(element, false);
    }

    private IElementType trimElement(IElementType element, boolean pushbackWhitespace)
    {
        CharSequence text = getTokenText();

        if(text.length() == 0)
        {
            return null;
        }

        int trailingWhitespaceCount = 0;

        for(int i = text.length() - 1; i >= 0 && Character.isWhitespace(text.charAt(i)); i--)
        {
            trailingWhitespaceCount++;
        }

        if(pushbackWhitespace)
        {
            yypushback(trailingWhitespaceCount);
        }

        if(text.length() > trailingWhitespaceCount)
        {
            return element;
        }

        return WHITE_SPACE;
    }

    private void pushbackEncodedEntity()
    {
        int tokenEnd = getTokenEnd();

        if(tokenEnd + 1 > zzBuffer.length())
        {
            return;
        }
        if(zzBuffer.charAt(tokenEnd) != ';')
        {
            return;
        }

        CharSequence text = getTokenText();

        for(int i = text.length() - 1; i >= 0; i--)
        {
            if(text.charAt(i) == '&')
            {
                yypushback(text.length() - i);
            }
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AbstractOxyTemplateLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return trimElement(T_TEMPLATE_HTML_CODE);
            } 
            // fall through
          case 47: break;
          case 2: 
            { return T_DIRECTIVE;
            } 
            // fall through
          case 48: break;
          case 3: 
            { return T_TEMPLATE_JAVASCRIPT_CODE;
        // followed by eof
            } 
            // fall through
          case 49: break;
          case 4: 
            { return T_DIRECTIVE_PARAM;
            } 
            // fall through
          case 50: break;
          case 5: 
            { yypushstate(S_MACRO_PARAM_ASIGNMENT);
        lastSeenAttributeName = getTokenText();
        return T_MACRO_PARAM_NAME;
            } 
            // fall through
          case 51: break;
          case 6: 
            { pushbackEncodedEntity();
        return decideParameterType();
            } 
            // fall through
          case 52: break;
          case 7: 
            { return trimElement(T_TEMPLATE_JAVASCRIPT_CODE);
            } 
            // fall through
          case 53: break;
          case 8: 
            { return T_BLOCK_COMMENT;
            } 
            // fall through
          case 54: break;
          case 9: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 55: break;
          case 10: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 56: break;
          case 11: 
            { yypushback(1);
        yyresetstate();
            } 
            // fall through
          case 57: break;
          case 12: 
            { yypushstate(S_DIRECTIVE_PARAM);
        return T_DIRECTIVE_PARAM_BOUNDARY;
            } 
            // fall through
          case 58: break;
          case 13: 
            { yypushback(1);
        yypushstate(S_JAVASCRIPT);
            } 
            // fall through
          case 59: break;
          case 14: 
            { yypushstate(S_JAVASCRIPT);
        return WHITE_SPACE;
            } 
            // fall through
          case 60: break;
          case 15: 
            { yypopstate();
        return T_DIRECTIVE_PARAM_BOUNDARY;
            } 
            // fall through
          case 61: break;
          case 16: 
            { yypushstate(S_MACRO_OPEN_OR_EMPTY_TAG);
        return T_XML_TAG_START;
            } 
            // fall through
          case 62: break;
          case 17: 
            { lastSeenAttributeName = null;
        yypushback(1);
        yypopstate(2);
            } 
            // fall through
          case 63: break;
          case 18: 
            { lastSeenAttributeName = null;
        yypopstate(2);
        return T_XML_OPEN_TAG_END;
            } 
            // fall through
          case 64: break;
          case 19: 
            { return T_MACRO_XML_NAMESPACE;
            } 
            // fall through
          case 65: break;
          case 20: 
            { yypushstate(S_MACRO_NAME);
        return T_XML_NAMESPACE_DELIMITER;
            } 
            // fall through
          case 66: break;
          case 21: 
            { yypushback(1);
        yypopstate(2);
            } 
            // fall through
          case 67: break;
          case 22: 
            { yypopstate(2);
        return T_XML_CLOSE_TAG_END;
            } 
            // fall through
          case 68: break;
          case 23: 
            { yypopstate();
        yypushback(1);
            } 
            // fall through
          case 69: break;
          case 24: 
            { return T_MACRO_PARAM_ASSIGNMENT;
            } 
            // fall through
          case 70: break;
          case 25: 
            { yypushstate(S_MACRO_PARAM_DQD);
        return T_MACRO_PARAM_BOUNDARY;
            } 
            // fall through
          case 71: break;
          case 26: 
            { yypushstate(S_MACRO_PARAM_SQD);
        return T_MACRO_PARAM_BOUNDARY;
            } 
            // fall through
          case 72: break;
          case 27: 
            { yypushback(1);
        yypopstate();
            } 
            // fall through
          case 73: break;
          case 28: 
            { yypopstate();
        lastSeenMacroName = getTokenText();
        return T_MACRO_NAME;
            } 
            // fall through
          case 74: break;
          case 29: 
            { yypopstate(2);
        return T_MACRO_PARAM_BOUNDARY;
            } 
            // fall through
          case 75: break;
          case 30: 
            { yypopstate(3);
        return T_MACRO_PARAM_BOUNDARY;
            } 
            // fall through
          case 76: break;
          case 31: 
            { IElementType el;

        yypushback(2);
        yypushstate(S_BLOCK);

        if((el = trimElement(T_TEMPLATE_HTML_CODE)) != null) return el;
            } 
            // fall through
          case 77: break;
          case 32: 
            { yypushstate(S_JAVASCRIPT_BLOCK);
        return T_OPEN_BLOCK_MARKER;
            } 
            // fall through
          case 78: break;
          case 33: 
            { yypopstate();
        return T_CLOSE_BLOCK_MARKER;
            } 
            // fall through
          case 79: break;
          case 34: 
            { yypushback(2);
        yypopstate();
            } 
            // fall through
          case 80: break;
          case 35: 
            { IElementType el;

        yypushback(2);
        yypopstate();

        if((el = trimElement(T_TEMPLATE_JAVASCRIPT_CODE, true)) != null) return el;
            } 
            // fall through
          case 81: break;
          case 36: 
            { yypushstate(S_MACRO_CLOSE_TAG);
        return T_XML_CLOSE_TAG_START;
            } 
            // fall through
          case 82: break;
          case 37: 
            { lastSeenAttributeName = null;
        yypopstate(2);
        return T_XML_EMPTY_TAG_END;
            } 
            // fall through
          case 83: break;
          case 38: 
            { IElementType el;

        yypushback(3);
        yypushstate(S_COMMENT_BLOCK);

        if((el = trimElement(T_TEMPLATE_HTML_CODE)) != null) return el;
            } 
            // fall through
          case 84: break;
          case 39: 
            { IElementType el;

        yypushback(3);
        yypushstate(S_MACRO_TAG_START);

        if((el = trimElement(T_TEMPLATE_HTML_CODE)) != null) return el;
            } 
            // fall through
          case 85: break;
          case 40: 
            { yypushstate(S_JAVASCRIPT_BLOCK);
        return T_OPEN_BLOCK_MARKER_PRINT;
            } 
            // fall through
          case 86: break;
          case 41: 
            { yypushstate(S_DIRECTIVE_BLOCK);
        return T_OPEN_BLOCK_MARKER_DIRECTIVE;
            } 
            // fall through
          case 87: break;
          case 42: 
            { return T_XML_ENCODED_ENTITY;
            } 
            // fall through
          case 88: break;
          case 43: 
            { yypopstate();
        return T_BLOCK_COMMENT;
            } 
            // fall through
          case 89: break;
          case 44: 
            { IElementType el;

        yypushback(4);
        yypushstate(S_MACRO_TAG_START);

        if((el = trimElement(T_TEMPLATE_HTML_CODE)) != null) return el;
            } 
            // fall through
          case 90: break;
          case 45: 
            { yypushstate(S_MACRO_PARAM_EXPRESSION_DQD);
        return T_MACRO_PARAM_EXPRESSION_STATEMENT;
            } 
            // fall through
          case 91: break;
          case 46: 
            { yypushstate(S_MACRO_PARAM_EXPRESSION_SQD);
        return T_MACRO_PARAM_EXPRESSION_STATEMENT;
            } 
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
